{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAgDeA,MAtCf,YAAwD,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC3C,OAKC,cALM,CAKN,OAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACtC,sBAAKI,UAAU,aAAf,UACI,oBAAIA,UAAU,cAAd,SAA6BJ,IAC7B,oBAAII,UAAU,aAAd,SAA4BL,IAC5B,oBAAIK,UAAU,eAAd,SAEKD,EAAOI,KAAI,SAACC,EAAMC,GAAP,OACR,oBAAgBL,UAAU,eAA1B,SACKI,GADIC,QAKjB,oBAAGL,UAAU,gBAAb,UAA8BH,EAAQS,MAAM,EAAG,KAA/C,gBC6BGC,G,kNApDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAC2BC,IAAMC,IAAI,4DADrC,gBACSJ,EADT,EACHK,KAAMA,KAAML,OAEnB,EAAKM,SAAS,CAACN,SAAQD,WAAU,IAHvB,2C,kEAQVQ,KAAKN,c,+BAGE,IAAD,EACsBM,KAAKT,MAA1BC,EADD,EACCA,UAAWC,EADZ,EACYA,OAGlB,OAKE,aAJA,CAIA,WAASV,UAAU,YAAnB,SACGS,EACD,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,2BAGJ,qBAAKA,UAAU,SAAf,SAEOU,EAAOP,KAAI,SAAAe,GAAK,OACf,cAAC,EAAD,CAEMC,GAAID,EAAMC,GACVxB,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAME,mBACdrB,OAAQmB,EAAMnB,QANTmB,EAAMC,e,GApCbE,IAAMC,YCMxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c10fe9fe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n//Movie component는 state가 필요 없음. 그러면 굳이 class component를\r\n//쓸 필요가 없음. 다시 function component로 돌아간다.\r\n\r\n//style component를 사용. component에서 style 주고 싶으면 style={{}} 안에 css를 써주면 됨.\r\n//ex) <h3 style={{backgroundColor: \"red\"}}>\r\n//다른 방법으로는 css file을 만드는 방법이 있음. \r\nfunction Movie({ year, title, summary, poster, genres}){\r\n    return(//movie_genres 안에는 또다른 component를 생성. li와 className을 return함.\r\n            //map function은 또다른 argument를 넘겨준다. \r\n            //하나는 item(genre), 하나는 item number(index)\r\n            //map 아래에 있는 item 들은 고유값인 key가 하나씩 필요한데 여긴 id가 없다.\r\n            //따라서 map이 넘겨주는 인자들 중 하나인 item number를 장르의 key로 쓰자.\r\n     <div className=\"movie\">\r\n         <img src={poster} alt={title} title={title}/>\r\n        <div className=\"movie_data\">\r\n            <h3 className=\"movie_title\">{title}</h3>\r\n            <h5 className=\"movie_year\">{year}</h5>\r\n            <ul className=\"movie_genres\">\r\n                \r\n                {genres.map((genre,index) =>(\r\n                    <li key={index} className=\"genres_genre\">\r\n                        {genre}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            <p className=\"movie_summary\">{summary.slice(0, 180)}...</p>  \r\n        </div>   \r\n     </div>\r\n    ); \r\n}\r\n//API로부터 응답 살펴보기 API url로 접속해서 필요한, 가져올 정보들을\r\n//propTypes로 지정해둔다.\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title:PropTypes.string.isRequired,\r\n    summary:PropTypes.string.isRequired,\r\n    poster:PropTypes.string.isRequired, //API에서는 medium_cover_image\r\n    genres:PropTypes.arrayOf(PropTypes.string).isRequired\r\n    //API에서 genres는 array타입. \r\n    //arrayOf(PropTypes.string)은 string타입 원소를 가진 array타입을 받음.\r\n};\r\n\r\nexport default Movie;","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\"; //Movie.js를 임포트 \nimport \"./App.css\";\n\nclass App extends React.Component{\n  state = {\n    isLoading: true,\n    movies: []\n  }\n//isLoading이 딜레이 걸렸다가 false가 되면서 영화 정보들이 뜨는 형태\n  getMovies = async() => {\n    const {data:{data:{movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n\n    this.setState({movies, isLoading:false});\n  };\n\n  componentDidMount(){\n   \n    this.getMovies();\n  }\n\n  render(){\n    const {isLoading, movies} = this.state;\n    //위 변수에 movies를 넣지 않으면 아래애 movies.map을 적을 때\n    //this.state.movies 이렇게 적어줘야 함.\n    return (\n      //javascript안의 class는 class component 클래스(여기서는 class App)를 의미.\n     //따라서 javascript 안에는 class를 적을 때 className으로 적는다.\n     //그냥 class라고 적으면 리액트는 class component와 혼동하여 Invalid DOM property `class`.에러 발생.\n\n      <section className=\"container\">\n        {isLoading ?( \n        <div className=\"loader\">\n          <span className=\"loader_text\">Loading....</span>\n        </div> \n     ) : (\n      <div className=\"movies\">\n        {\n             movies.map(movie => (\n              <Movie \n                    key={movie.id}\n                    id={movie.id} \n                    year={movie.year} \n                    title={movie.title} \n                    summary={movie.summary} \n                    poster={movie.medium_cover_image}\n                    genres={movie.genres}\n                  />\n                  ))\n        }\n      </div>\n     )}\n    </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n//여기서 컴포넌트 사용은 App(App.js)에서 App을 import 해서\n//<App/> 태그를 사용하여 하고 있다. potato도 응용하여 불러오자.\n//하지만! ↓\n\n//리액트는 하나의 컴포넌트만 렌더링 하기 때문에 여기서는 App만 렌더링 가능.\n//그러면 App으로 가서 Potato 내용을 넣어주자!\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}